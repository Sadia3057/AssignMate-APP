<-----------------MainActivity--------------->
package com.example.assignmate

import android.Manifest
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.platform.LocalContext
import androidx.core.content.ContextCompat
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.assignmate.ui.theme.AssignMateTheme

data class Assignment(
    val title: String,
    val dueDate: String,
    val subject: String,
    val studentSubmissions: MutableMap<String, SubmissionStatus> = mutableMapOf()
)

data class SubmissionStatus(
    var isSubmitted: Boolean = false,
    var fileUri: Uri? = null
)

data class User(
    val role: String,
    val rollNumber: String? = null,
    val password: String
)

class MainActivity : ComponentActivity() {

    private val usersDatabase = mapOf(
        "abc" to User(role = "student", rollNumber = "1", password = "abc"),
        "def" to User(role = "student", rollNumber = "2", password = "def"),
        "ghi" to User(role = "student", rollNumber = "3", password = "ghi"),
        "jkl" to User(role = "student", rollNumber = "4", password = "jkl"),
        "mno" to User(role = "faculty", password = "mno")
    )

    private val assignmentsState = mutableStateListOf(
        Assignment("DIP Assignment 1", "2024-12-10", "DIP"),
        Assignment("DIP Assignment 2", "2024-12-20", "DIP"),
        Assignment("AI Assignment 1", "2024-12-15", "AI"),
        Assignment("AI Assignment 2", "2024-12-25", "AI"),
        Assignment("Startup Assignment 1", "2024-12-20", "Startup"),
        Assignment("Startup Assignment 2", "2024-12-30", "Startup"),
        Assignment("SE Assignment 1", "2024-12-25", "SE"),
        Assignment("SE Assignment 2", "2024-12-31", "SE"),
        Assignment("IRS Assignment 1", "2024-12-30", "IRS"),
        Assignment("IRS Assignment 2", "2025-01-05", "IRS")
    )

    private var currentRollNumber: String? = null
    private var selectedAssignment: Assignment? = null

    private val pickDocumentLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->
        uri?.let {
            selectedAssignment?.let { assignment ->
                updateAssignmentSubmission(uri, currentRollNumber, assignment)
            } ?: showToast("No assignment selected!")
        }
    }

    private val permissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted ->
        if (!isGranted) {
            showToast("Permission required to access documents.")
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            AssignMateTheme {
                val navController = rememberNavController()

                NavHost(navController = navController, startDestination = "splash") {
                    composable("splash") {
                        SplashScreen(onSplashFinished = {
                            navController.navigate("welcome") {
                                popUpTo("splash") { inclusive = true }
                            }
                        })
                    }

                    composable("welcome") {
                        WelcomeScreen(onNavigateToLogin = { role ->
                            if (role == "student" || role == "faculty") {
                                navController.navigate("login")
                            }
                        })
                    }

                    composable("login") {
                        LoginScreen(usersDatabase = usersDatabase, onLogin = { role, rollNumber ->
                            currentRollNumber = rollNumber
                            if (role == "student") {
                                navController.navigate("subject_list")
                            } else if (role == "faculty") {
                                navController.navigate("faculty_dashboard")
                            }
                        })
                    }

                    composable("subject_list") {
                        SubjectListScreen(
                            subjects = listOf("DIP", "AI", "Startup", "SE", "IRS"),
                            onSubjectClick = { subject -> navController.navigate("assignments/${Uri.encode(subject)}") }
                        )
                    }

                    composable("assignments/{subject}") { backStackEntry ->
                        val subject = backStackEntry.arguments?.getString("subject") ?: "Unknown"
                        AssignmentListScreen(
                            subject = subject,
                            assignments = assignmentsState.filter { it.subject == subject },
                            rollNumber = currentRollNumber,
                            onUploadClick = { assignment ->
                                checkPermissionAndPickDocument(assignment)
                            }
                        )
                    }

                    composable("faculty_dashboard") {
                        FacultyDashboardScreen(
                            assignments = assignmentsState,
                            onOpenPdf = { pdfUri ->
                                openPdf(this@MainActivity, pdfUri)
                            }
                        )
                    }
                }
            }
        }
    }

    private fun updateAssignmentSubmission(uri: Uri, rollNumber: String?, assignment: Assignment) {
        rollNumber?.let {
            // Update submission status
            val updatedSubmissions = assignment.studentSubmissions.toMutableMap()
            updatedSubmissions[it] = SubmissionStatus(isSubmitted = true, fileUri = uri)

            val index = assignmentsState.indexOf(assignment)
            if (index >= 0) {
                assignmentsState[index] = assignment.copy(studentSubmissions = updatedSubmissions)
            }

            showToast("${assignment.title} for ${assignment.subject} submitted by Roll No. $it!")
        } ?: showToast("Roll number not available.")
    }

    private fun checkPermissionAndPickDocument(assignment: Assignment) {
        selectedAssignment = assignment

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU ||
            ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
            pickDocumentLauncher.launch("*/*")
        } else {
            permissionLauncher.launch(Manifest.permission.READ_EXTERNAL_STORAGE)
        }
    }

    private fun openPdf(context: Context, pdfUri: Uri) {
        val intent = Intent(Intent.ACTION_VIEW).apply {
            setDataAndType(pdfUri, "application/pdf")
            flags = Intent.FLAG_GRANT_READ_URI_PERMISSION
        }
        try {
            context.startActivity(intent)
        } catch (e: Exception) {
            showToast("No PDF viewer found.")
        }
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}

<--------FacultyDashBoard------------->
package com.example.assignmate

import android.net.Uri
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun FacultyDashboardScreen(
    assignments: List<Assignment>,
    onOpenPdf: (Uri) -> Unit // Callback to open PDFs
) {
    // Scroll state to enable scrolling
    val scrollState = rememberScrollState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(scrollState) // Enables scrolling
            .padding(16.dp)
            .background(MaterialTheme.colorScheme.background),
        verticalArrangement = Arrangement.Top
    ) {
        Text(
            text = "Faculty Dashboard",
            style = MaterialTheme.typography.headlineLarge.copy(fontWeight = FontWeight.Bold),
            modifier = Modifier.padding(bottom = 16.dp),
            color = MaterialTheme.colorScheme.primary
        )

        // List of assignments
        assignments.forEach { assignment ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(12.dp),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    // Assignment Details
                    Text(
                        text = "Assignment: ${assignment.title}",
                        style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)
                    )
                    Text(
                        text = "Due Date: ${assignment.dueDate}",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Text(
                        text = "Subject: ${assignment.subject}",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    Spacer(modifier = Modifier.height(12.dp))

                    // Submissions Section
                    val submittedStudents = assignment.studentSubmissions.filter { it.value.isSubmitted }
                    if (submittedStudents.isNotEmpty()) {
                        Text(
                            text = "Submitted Students:",
                            style = MaterialTheme.typography.titleSmall.copy(
                                fontSize = 16.sp,
                                fontWeight = FontWeight.SemiBold
                            ),
                            color = MaterialTheme.colorScheme.secondary
                        )
                        Spacer(modifier = Modifier.height(8.dp))

                        submittedStudents.forEach { (rollNumber, submission) ->
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(vertical = 4.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                // Roll Number
                                Text(
                                    text = "Roll Number: $rollNumber",
                                    style = MaterialTheme.typography.bodyMedium,
                                    modifier = Modifier.weight(1f)
                                )
                                // Open PDF Button
                                Button(
                                    onClick = { submission.fileUri?.let(onOpenPdf) },
                                    shape = RoundedCornerShape(8.dp),
                                    colors = ButtonDefaults.buttonColors(
                                        containerColor = MaterialTheme.colorScheme.primary
                                    )
                                ) {
                                    Text(text = "View PDF", color = Color.White)
                                }
                            }
                        }
                    } else {
                        Text(
                            text = "No Submissions",
                            style = MaterialTheme.typography.bodyMedium.copy(color = MaterialTheme.colorScheme.error)
                        )
                    }
                }
            }
        }
    }
}
<-------------------LoginScreen--------------->
package com.example.assignmate

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.tooling.preview.Preview

@Composable
fun LoginScreen(usersDatabase: Map<String, User>, onLogin: (String, String?) -> Unit) {
    var userRole by remember { mutableStateOf("") }
    var rollNumber by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var errorMessage by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        TextField(
            value = rollNumber,
            onValueChange = { rollNumber = it },
            label = { Text("Roll Number") },
            singleLine = true
        )
        TextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Password") },
            singleLine = true,
            modifier = Modifier.padding(top = 8.dp)
        )
        Button(
            onClick = {
                val user = usersDatabase[password]
                if (user != null && (user.rollNumber == rollNumber || user.role == "faculty")) {
                    userRole = user.role
                    onLogin(user.role, user.rollNumber)
                } else {
                    errorMessage = "Invalid Roll Number or Password"
                }
            },
            modifier = Modifier.padding(top = 8.dp)
        ) {
            Text("Login")
        }
        if (errorMessage.isNotEmpty()) {
            Text(text = errorMessage, color = Color.Red, modifier = Modifier.padding(top = 8.dp))
        }
    }
}

<-----------Splashscreen------------->
package com.example.assignmate

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay

@Composable
fun SplashScreen(onSplashFinished: () -> Unit) {
    // Simulating a delay for splash screen
    LaunchedEffect(Unit) {
        delay(3000) // 3 seconds
        onSplashFinished()
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF87CEEB)) // Sky Blue color
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // App Logo
        Image(
            painter = painterResource(id = R.mipmap.ic_launcher_foreground),
            contentDescription = "App Logo",
            modifier = Modifier.size(100.dp)
        )

        // App Name
        Text(
            text = "AssignMate",
            fontSize = 28.sp,
            modifier = Modifier.padding(top = 16.dp),
            textAlign = TextAlign.Center
        )

        // Developer Info
        Text(
            text = "Developed by: Group 15",
            fontSize = 16.sp,
            modifier = Modifier.padding(top = 8.dp),
            textAlign = TextAlign.Center
        )
    }
}
<---------------build.gradle------------------>
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

android {
    namespace = "com.example.assignmate"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.example.assignmate"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.3"
    }
}

dependencies {
    implementation("androidx.recyclerview:recyclerview:1.3.2")
    implementation("com.google.android.material:material:1.12.0")
    implementation("androidx.compose.material3:material3:1.1.0")
    implementation("androidx.activity:activity-ktx:1.7.2")
    implementation("androidx.fragment:fragment-ktx:1.5.7")
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.2")
    implementation("androidx.activity:activity-compose:1.8.0")
    implementation("androidx.navigation:navigation-compose:2.8.4")
    implementation("androidx.compose.ui:ui:1.3.0") // Replace with the latest Compose version
    implementation("androidx.compose.material:material:1.3.0") // Replace with the latest Compose material version
    implementation("androidx.compose.material3:material3:1.0.0") // If you're using material3 components
    implementation("androidx.compose.foundation:foundation:1.3.0") // For layout components like Column, Spacer, etc.
    implementation("androidx.navigation:navigation-compose:2.5.0")

    // Testing libraries
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:1.5.3")
    implementation("androidx.compose.ui:ui:1.5.3")
    implementation("androidx.compose.material3:material3:1.1.0")
    implementation("androidx.compose.ui:ui-tooling-preview:1.5.3")

}
<-----------------SubjectListScreen------------->
package com.example.assignmate

import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun SubjectListScreen(subjects: List<String>, onSubjectClick: (String) -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        subjects.forEach { subject ->
            Button(
                onClick = { onSubjectClick(subject) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp)
            ) {
                Text(text = subject)
            }
        }
    }
}

<--------------models.kt---------------->
package com.example.assignmate.models

import android.net.Uri

// Model to represent an Assignment
data class Assignment(
    val title: String,
    val dueDate: String,
    val subject: String, // The subject for the assignment
    val studentSubmissions: Map<String, SubmissionStatus>, // Map of student roll numbers to their submission status
    var status: String = "Pending" // The overall assignment status (Pending/Submitted)
)

// Model to represent the status of a student's submission
data class SubmissionStatus(
    var isSubmitted: Boolean = false, // Whether the student has submitted the assignment
    var fileUri: Uri? = null // URI for the student's submitted PDF (if any)
)


<------------AssignmentListScreen------------>
package com.example.assignmate

import android.net.Uri
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp

@Composable
fun AssignmentListScreen(
    subject: String,
    assignments: List<Assignment>,
    rollNumber: String?,
    onUploadClick: (Assignment) -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "Assignments for $subject",
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        assignments.forEach { assignment ->
            val submissionStatus = assignment.studentSubmissions[rollNumber]
            val isSubmitted = submissionStatus?.isSubmitted == true

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                ) {
                    Text(text = "Title: ${assignment.title}", style = MaterialTheme.typography.bodyLarge)
                    Text(text = "Due Date: ${assignment.dueDate}", style = MaterialTheme.typography.bodyMedium)

                    Spacer(modifier = Modifier.height(8.dp))

                    // Display assignment status
                    Text(
                        text = "Status: ${if (isSubmitted) "Submitted" else "Pending"}",
                        style = MaterialTheme.typography.bodyMedium,
                        color = if (isSubmitted) Color(0xFF4CAF50) else Color(0xFFF44336)
                    )

                    if (!isSubmitted) {
                        Spacer(modifier = Modifier.height(8.dp))
                        Button(
                            onClick = { onUploadClick(assignment) },
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Text("Upload Assignment")
                        }
                    }
                }
            }
        }
    }
}

<-----------WelcomeScreen------------------->
package com.example.assignmate

import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun WelcomeScreen(onNavigateToLogin: (String) -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Welcome to AssignMate", modifier = Modifier.padding(bottom = 24.dp))

        Button(
            onClick = { onNavigateToLogin("student") },
            modifier = Modifier.fillMaxWidth().padding(vertical = 8.dp)
        ) {
            Text("Student Login")
        }

        Button(
            onClick = { onNavigateToLogin("faculty") },
            modifier = Modifier.fillMaxWidth().padding(vertical = 8.dp)
        ) {
            Text("Faculty Login")
        }
    }
}

<--------AndroidManiFest------------------>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.example.assignmate">

    <!-- Permissions -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" tools:node="merge" />
    <uses-permission android:name="android.permission.READ_MEDIA_DOCUMENTS" tools:node="merge" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.AssignMate">

        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>

<-------------ic.launcher--------------->
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
